rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isAuthed() { return request.auth != null; }
    function userRole() {
      return isAuthed() && request.auth.token.role != null ? request.auth.token.role : "";
    }
    function isAdmin() { return userRole() == "admin" || userRole() == "master"; }
    function userTenant() {
      return isAuthed() && request.auth.token.tenantId != null ? request.auth.token.tenantId : "";
    }

    // Validações já existentes
    function isUpper(s)   { return s is string && s == upper(s); }
    function nonNeg(n)    { return n is number && n >= 0; }
    function validTipo(t) { return t in ["RESFRIADO","CONGELADO"]; }
    function validUnit(u) { return u in ["KG","CX","UN"]; }
    function isServerTime(ts) { return ts is timestamp && ts == request.time; }

    // App Pedidos isolado com auth anônima (mantido)
    function anonAllowedForTenant(tenantId) {
      return request.auth != null
        && request.auth.token.sign_in_provider == "anonymous"
        && (tenantId == "serranobrecarnes.com.br" || tenantId == "serranobre.com.br");
    }

    match /tenants/{tenantId}/{document=**} {

      // READ do próprio tenant (ou master) e também anônimo do Pedidos
      allow read: if (isAuthed() && (tenantId == userTenant() || userRole() == "master"))
                  || anonAllowedForTenant(tenantId);

      // -------- CLIENTES --------
      match /clientes/{clienteId} {
        allow create, update: if (isAuthed() && tenantId == userTenant())
                              || anonAllowedForTenant(tenantId);
        allow delete: if isAdmin() && tenantId == userTenant();

        match /produtos/{prodId} {
          allow read: if (isAuthed() && tenantId == userTenant()) || anonAllowedForTenant(tenantId);
          allow create, update, delete: if isAdmin() && tenantId == userTenant();
        }
      }

      // -------- HISTÓRICO DE PREÇOS --------
      match /historico_precos/{docId} {
        allow create: if (isAuthed() && tenantId == userTenant())
                      || anonAllowedForTenant(tenantId);
        allow update, delete: if false;
      }

      // -------- PEDIDOS --------
      match /pedidos/{pedidoId} {

        // criar/editar: usuário do tenant OU (exceção) anônimo do app Pedidos
        allow create, update: if (isAuthed() && tenantId == userTenant())
                              || anonAllowedForTenant(tenantId);

        // excluir: qualquer USUÁRIO AUTENTICADO do próprio tenant
        // (antes era só admin; agora libera para todos do tenant)
        allow delete: if isAuthed() && tenantId == userTenant();
      }

      // -------- ESTOQUE --------
      match /inventory/{docId} {
        allow create, update: if isAuthed() && tenantId == userTenant()
          && isUpper(request.resource.data.family)
          && isUpper(request.resource.data.product)
          && nonNeg(request.resource.data.resfriado_kg)
          && nonNeg(request.resource.data.resfriado_cx)
          && nonNeg(request.resource.data.resfriado_un)
          && nonNeg(request.resource.data.congelado_kg)
          && nonNeg(request.resource.data.congelado_cx)
          && nonNeg(request.resource.data.congelado_un)
          && ("updated_at" in request.resource.data ? isServerTime(request.resource.data.updated_at) : true);
        allow delete: if false;
      }

      match /history/{docId} {
        allow create: if isAuthed() && tenantId == userTenant()
          && isUpper(request.resource.data.family)
          && isUpper(request.resource.data.product)
          && validTipo(request.resource.data.tipo)
          && validUnit(request.resource.data.unit)
          && (request.resource.data.qty is number && request.resource.data.qty >= 0)
          && ("at" in request.resource.data ? isServerTime(request.resource.data.at) : true);
        allow update, delete: if false;
      }

      // módulos futuros
      match /despesas/{docId}     { allow create, update, delete: if isAdmin() && tenantId == userTenant(); }
      match /crm_contatos/{docId} { allow create, update, delete: if isAdmin() && tenantId == userTenant(); }
      match /crm_leads/{docId}    { allow create, update, delete: if isAdmin() && tenantId == userTenant(); }
      match /metrics/{docId}      { allow write: if false; }
    }

    // bloqueio fora do namespace tenants
    match /{document=**} { allow read, write: if false; }
  }
}
