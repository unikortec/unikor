rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---- Helpers ----
    function isAuthed() { return request.auth != null; }

    function userRole() {
      return isAuthed() && request.auth.token.role != null
        ? request.auth.token.role
        : "";
    }

    function isAdmin() {
      return userRole() == "admin" || userRole() == "master";
    }

    function userTenant() {
      return isAuthed() && request.auth.token.tenantId != null
        ? request.auth.token.tenantId
        : "";
    }

    function isUpper(s)   { return s is string && s == upper(s); }
    function nonNeg(n)    { return n is number && n >= 0; }
    function validTipo(t) { return t in ["RESFRIADO","CONGELADO"]; }
    function validUnit(u) { return u in ["KG","CX","UN"]; }

    // Garante que o write é para o tenant do path (se o doc tiver campo tenantId)
    function matchesTenantField(tenantId) {
      return !("tenantId" in request.resource.data) ||
             request.resource.data.tenantId == tenantId;
    }

    // ======= CORRIGIDO: aceita createdBy/createdAt imutáveis em UPDATE =======
    function validAuthorFields() {
      // tipos válidos para timestamps quando enviados
      let hasCreated = ("criadoEm" in request.resource.data && request.resource.data.criadoEm is timestamp)
                    || ("createdAt" in request.resource.data && request.resource.data.createdAt is timestamp);
      let hasUpdated = ("atualizadoEm" in request.resource.data && request.resource.data.atualizadoEm is timestamp)
                    || ("updatedAt" in request.resource.data && request.resource.data.updatedAt is timestamp);

      // quais chaves mudaram do doc atual -> doc novo
      let diff = request.resource.data.diff(resource.data);
      let changed = diff.changedKeys();

      // createdBy/createdAt:
      //  - se NÃO mudarem: ok
      //  - se mudarem: exigir createdBy == usuário e timestamps com tipo correto
      let createdByOk = !changed.hasAny(['createdBy']) ||
                        request.resource.data.createdBy == request.auth.uid;

      let createdTsOk = !changed.hasAny(['criadoEm','createdAt']) || hasCreated;

      // updatedBy deve bater com o usuário quando enviado
      let updatedByOk = (!("updatedBy" in request.resource.data) ||
                         request.resource.data.updatedBy == request.auth.uid);

      // updatedAt/atualizadoEm, quando presentes, precisam ser timestamp
      let updatedTsOk = ( !("atualizadoEm" in request.resource.data) && !("updatedAt" in request.resource.data) )
                        || hasUpdated;

      return createdByOk && createdTsOk && updatedByOk && updatedTsOk;
    }

    // ====== TUDO dentro de tenants ======
    match /tenants/{tenantId}/{document=**} {

      // Leitura padrão: user do próprio tenant ou master
      allow read: if isAuthed() && (tenantId == userTenant() || userRole() == "master");

      // ---- CLIENTES ----
      match /clientes/{clienteId} {
        allow read:    if isAuthed() && (tenantId == userTenant() || isAdmin());
        allow create:  if isAuthed() && (tenantId == userTenant() || isAdmin())
                          && matchesTenantField(tenantId) && validAuthorFields();
        allow update:  if isAuthed() && (tenantId == userTenant() || isAdmin())
                          && matchesTenantField(tenantId) && validAuthorFields();
        allow delete:  if isAdmin() && tenantId == userTenant();

        // subcoleção produtos (apenas admin para escrita)
        match /produtos/{prodId} {
          allow read: if isAuthed() && tenantId == userTenant();
          allow create, update, delete:
            if isAdmin() && tenantId == userTenant()
               && matchesTenantField(tenantId) && validAuthorFields();
        }
      }

      // ---- HISTÓRICO DE PREÇOS ---- (append-only)
      match /historico_precos/{docId} {
        allow read:   if isAuthed() && (tenantId == userTenant() || isAdmin());
        allow create: if isAuthed() && (tenantId == userTenant() || isAdmin())
                        && matchesTenantField(tenantId) && validAuthorFields();
        allow update, delete: if false;
      }

      // ---- PEDIDOS ----
      match /pedidos/{pedidoId} {
        allow read:   if isAuthed() && (tenantId == userTenant() || isAdmin());
        allow create: if isAuthed() && (tenantId == userTenant() || isAdmin())
                        && matchesTenantField(tenantId) && validAuthorFields();
        allow update: if isAuthed() && (tenantId == userTenant() || isAdmin())
                        && matchesTenantField(tenantId) && validAuthorFields();
        allow delete: if isAuthed() && (tenantId == userTenant() || isAdmin());
      }

      // ---- ESTOQUE ----
      match /inventory/{docId} {
        allow read: if isAuthed() && (tenantId == userTenant() || isAdmin());

        allow create, update:
          if isAuthed() && (tenantId == userTenant() || isAdmin()) &&
             matchesTenantField(tenantId) && validAuthorFields() &&
             isUpper(request.resource.data.family) &&
             isUpper(request.resource.data.product) &&
             nonNeg(request.resource.data.resfriado_kg) &&
             nonNeg(request.resource.data.resfriado_cx) &&
             nonNeg(request.resource.data.resfriado_un) &&
             nonNeg(request.resource.data.congelado_kg) &&
             nonNeg(request.resource.data.congelado_cx) &&
             nonNeg(request.resource.data.congelado_un);

        allow delete: if isAdmin() && tenantId == userTenant();
      }

      // ---- movimentações de estoque ---- (append-only)
      match /history/{docId} {
        allow read: if isAuthed() && (tenantId == userTenant() || isAdmin());
        allow create:
          if isAuthed() && (tenantId == userTenant() || isAdmin()) &&
             matchesTenantField(tenantId) && validAuthorFields() &&
             isUpper(request.resource.data.family) &&
             isUpper(request.resource.data.product) &&
             validTipo(request.resource.data.tipo) &&
             validUnit(request.resource.data.unit) &&
             (request.resource.data.qty is number && request.resource.data.qty >= 0);
        allow update, delete: if false;
      }

      // ---- DESPESAS ----
      match /despesas/{docId} {
        allow read: if isAuthed() && (tenantId == userTenant() || isAdmin());
        allow create, update:
          if isAuthed() && (tenantId == userTenant() || isAdmin()) &&
             matchesTenantField(tenantId) && validAuthorFields();
        allow delete: if isAdmin() && tenantId == userTenant();
      }

      // ---- RELATÓRIOS ---- (somente leitura)
      match /relatorios/{docId} {
        allow read: if isAuthed() && (tenantId == userTenant() || isAdmin());
        allow write: if false;
      }

      // ---- CRM (somente admin/master)
      match /crm_contatos/{docId} {
        allow read, create, update, delete:
          if isAdmin() && tenantId == userTenant()
             && matchesTenantField(tenantId) && validAuthorFields();
      }
      match /crm_leads/{docId} {
        allow read, create, update, delete:
          if isAdmin() && tenantId == userTenant()
             && matchesTenantField(tenantId) && validAuthorFields();
      }

      // ---- DASHBOARD (somente admin/master)
      match /metrics/{docId} {
        allow read, write:
          if isAdmin() && tenantId == userTenant()
             && matchesTenantField(tenantId) && validAuthorFields();
      }
    }

    // Bloqueio geral fora de /tenants
    match /{document=**} { allow read, write: if false; }
  }
}